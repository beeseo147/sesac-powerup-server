



  
// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

#pragma once


#include "Powerup_common.h"

namespace PowerupS2G {


	class Proxy : public ::Proud::IRmiProxy
	{
	public:
	virtual bool GameStart ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool GameStart ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool GameEnd ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool GameEnd ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool PlayersReady ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const std::map<int32_t,bool> & playersReady) PN_SEALED; 
	virtual bool PlayersReady ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const std::map<int32_t,bool> & playersReady)   PN_SEALED;  
	virtual bool TimeNow ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int64_t & ticksRemain) PN_SEALED; 
	virtual bool TimeNow ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int64_t & ticksRemain)   PN_SEALED;  
	virtual bool PlayerMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & playerNo, const int32_t & key, const std::vector<int32_t> & enemies) PN_SEALED; 
	virtual bool PlayerMove ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int32_t & playerNo, const int32_t & key, const std::vector<int32_t> & enemies)   PN_SEALED;  
	virtual bool PlayersRank ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const std::map<int32_t,int32_t> & playersRank) PN_SEALED; 
	virtual bool PlayersRank ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const std::map<int32_t,int32_t> & playersRank)   PN_SEALED;  
static const PNTCHAR* RmiName_GameStart;
static const PNTCHAR* RmiName_GameEnd;
static const PNTCHAR* RmiName_PlayersReady;
static const PNTCHAR* RmiName_TimeNow;
static const PNTCHAR* RmiName_PlayerMove;
static const PNTCHAR* RmiName_PlayersRank;
static const PNTCHAR* RmiName_First;
		Proxy()
		{
			if(m_signature != 1)
				::Proud::ShowUserMisuseError(::Proud::ProxyBadSignatureErrorText);
		}

		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; } 
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

}


namespace PowerupS2C {


	class Proxy : public ::Proud::IRmiProxy
	{
	public:
	virtual bool PlayerEnter ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & playerNo) PN_SEALED; 
	virtual bool PlayerEnter ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & playerNo)   PN_SEALED;  
	virtual bool PlayerExit ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & isExited) PN_SEALED; 
	virtual bool PlayerExit ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const bool & isExited)   PN_SEALED;  
static const PNTCHAR* RmiName_PlayerEnter;
static const PNTCHAR* RmiName_PlayerExit;
static const PNTCHAR* RmiName_First;
		Proxy()
		{
			if(m_signature != 1)
				::Proud::ShowUserMisuseError(::Proud::ProxyBadSignatureErrorText);
		}

		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; } 
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

}


namespace PowerupC2S {


	class Proxy : public ::Proud::IRmiProxy
	{
	public:
	virtual bool EnterRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool EnterRoom ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool ExitRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_SEALED; 
	virtual bool ExitRoom ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)   PN_SEALED;  
	virtual bool GetReady ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & isReady) PN_SEALED; 
	virtual bool GetReady ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const bool & isReady)   PN_SEALED;  
	virtual bool Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & key, const std::vector<int32_t> & enemies) PN_SEALED; 
	virtual bool Move ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int32_t & key, const std::vector<int32_t> & enemies)   PN_SEALED;  
	virtual bool HasPoint ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & point) PN_SEALED; 
	virtual bool HasPoint ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int32_t & point)   PN_SEALED;  
static const PNTCHAR* RmiName_EnterRoom;
static const PNTCHAR* RmiName_ExitRoom;
static const PNTCHAR* RmiName_GetReady;
static const PNTCHAR* RmiName_Move;
static const PNTCHAR* RmiName_HasPoint;
static const PNTCHAR* RmiName_First;
		Proxy()
		{
			if(m_signature != 1)
				::Proud::ShowUserMisuseError(::Proud::ProxyBadSignatureErrorText);
		}

		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; } 
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

}



