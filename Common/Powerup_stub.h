  






// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.
   
#pragma once


#include "Powerup_common.h"

     
namespace PowerupS2G {


	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool GameStart ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_PowerupS2G_GameStart bool GameStart ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_PowerupS2G_GameStart(DerivedClass) bool DerivedClass::GameStart ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_PowerupS2G_GameStart GameStart ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_PowerupS2G_GameStart ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
               
		virtual bool GameEnd ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_PowerupS2G_GameEnd bool GameEnd ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_PowerupS2G_GameEnd(DerivedClass) bool DerivedClass::GameEnd ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_PowerupS2G_GameEnd GameEnd ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_PowerupS2G_GameEnd ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
               
		virtual bool PlayersReady ( ::Proud::HostID, ::Proud::RmiContext& , const std::map<int32_t,bool> & )		{ 
			return false;
		} 

#define DECRMI_PowerupS2G_PlayersReady bool PlayersReady ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const std::map<int32_t,bool> & playersReady) PN_OVERRIDE

#define DEFRMI_PowerupS2G_PlayersReady(DerivedClass) bool DerivedClass::PlayersReady ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const std::map<int32_t,bool> & playersReady)
#define CALL_PowerupS2G_PlayersReady PlayersReady ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const std::map<int32_t,bool> & playersReady)
#define PARAM_PowerupS2G_PlayersReady ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const std::map<int32_t,bool> & playersReady)
               
		virtual bool TimeNow ( ::Proud::HostID, ::Proud::RmiContext& , const int64_t & )		{ 
			return false;
		} 

#define DECRMI_PowerupS2G_TimeNow bool TimeNow ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int64_t & ticksRemain) PN_OVERRIDE

#define DEFRMI_PowerupS2G_TimeNow(DerivedClass) bool DerivedClass::TimeNow ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int64_t & ticksRemain)
#define CALL_PowerupS2G_TimeNow TimeNow ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int64_t & ticksRemain)
#define PARAM_PowerupS2G_TimeNow ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int64_t & ticksRemain)
               
		virtual bool PlayerMove ( ::Proud::HostID, ::Proud::RmiContext& , const int32_t & , const int32_t & , const std::vector<int32_t> & )		{ 
			return false;
		} 

#define DECRMI_PowerupS2G_PlayerMove bool PlayerMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & playerNo, const int32_t & key, const std::vector<int32_t> & enemies) PN_OVERRIDE

#define DEFRMI_PowerupS2G_PlayerMove(DerivedClass) bool DerivedClass::PlayerMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & playerNo, const int32_t & key, const std::vector<int32_t> & enemies)
#define CALL_PowerupS2G_PlayerMove PlayerMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & playerNo, const int32_t & key, const std::vector<int32_t> & enemies)
#define PARAM_PowerupS2G_PlayerMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & playerNo, const int32_t & key, const std::vector<int32_t> & enemies)
               
		virtual bool PlayersRank ( ::Proud::HostID, ::Proud::RmiContext& , const std::map<int32_t,int32_t> & )		{ 
			return false;
		} 

#define DECRMI_PowerupS2G_PlayersRank bool PlayersRank ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const std::map<int32_t,int32_t> & playersRank) PN_OVERRIDE

#define DEFRMI_PowerupS2G_PlayersRank(DerivedClass) bool DerivedClass::PlayersRank ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const std::map<int32_t,int32_t> & playersRank)
#define CALL_PowerupS2G_PlayersRank PlayersRank ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const std::map<int32_t,int32_t> & playersRank)
#define PARAM_PowerupS2G_PlayersRank ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const std::map<int32_t,int32_t> & playersRank)
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_GameStart;
		static const PNTCHAR* RmiName_GameEnd;
		static const PNTCHAR* RmiName_PlayersReady;
		static const PNTCHAR* RmiName_TimeNow;
		static const PNTCHAR* RmiName_PlayerMove;
		static const PNTCHAR* RmiName_PlayersRank;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > GameStart_Function;
		virtual bool GameStart ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (GameStart_Function==nullptr) 
				return true; 
			return GameStart_Function(remote,rmiContext); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > GameEnd_Function;
		virtual bool GameEnd ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (GameEnd_Function==nullptr) 
				return true; 
			return GameEnd_Function(remote,rmiContext); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const std::map<int32_t,bool> & ) > PlayersReady_Function;
		virtual bool PlayersReady ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const std::map<int32_t,bool> & playersReady) 
		{ 
			if (PlayersReady_Function==nullptr) 
				return true; 
			return PlayersReady_Function(remote,rmiContext, playersReady); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int64_t & ) > TimeNow_Function;
		virtual bool TimeNow ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int64_t & ticksRemain) 
		{ 
			if (TimeNow_Function==nullptr) 
				return true; 
			return TimeNow_Function(remote,rmiContext, ticksRemain); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int32_t & , const int32_t & , const std::vector<int32_t> & ) > PlayerMove_Function;
		virtual bool PlayerMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & playerNo, const int32_t & key, const std::vector<int32_t> & enemies) 
		{ 
			if (PlayerMove_Function==nullptr) 
				return true; 
			return PlayerMove_Function(remote,rmiContext, playerNo, key, enemies); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const std::map<int32_t,int32_t> & ) > PlayersRank_Function;
		virtual bool PlayersRank ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const std::map<int32_t,int32_t> & playersRank) 
		{ 
			if (PlayersRank_Function==nullptr) 
				return true; 
			return PlayersRank_Function(remote,rmiContext, playersRank); 
		}

	};
#endif

}


     
namespace PowerupS2C {


	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool PlayerEnter ( ::Proud::HostID, ::Proud::RmiContext& , const int & )		{ 
			return false;
		} 

#define DECRMI_PowerupS2C_PlayerEnter bool PlayerEnter ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & playerNo) PN_OVERRIDE

#define DEFRMI_PowerupS2C_PlayerEnter(DerivedClass) bool DerivedClass::PlayerEnter ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & playerNo)
#define CALL_PowerupS2C_PlayerEnter PlayerEnter ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & playerNo)
#define PARAM_PowerupS2C_PlayerEnter ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & playerNo)
               
		virtual bool PlayerExit ( ::Proud::HostID, ::Proud::RmiContext& , const bool & )		{ 
			return false;
		} 

#define DECRMI_PowerupS2C_PlayerExit bool PlayerExit ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & isExited) PN_OVERRIDE

#define DEFRMI_PowerupS2C_PlayerExit(DerivedClass) bool DerivedClass::PlayerExit ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & isExited)
#define CALL_PowerupS2C_PlayerExit PlayerExit ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & isExited)
#define PARAM_PowerupS2C_PlayerExit ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & isExited)
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_PlayerEnter;
		static const PNTCHAR* RmiName_PlayerExit;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & ) > PlayerEnter_Function;
		virtual bool PlayerEnter ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & playerNo) 
		{ 
			if (PlayerEnter_Function==nullptr) 
				return true; 
			return PlayerEnter_Function(remote,rmiContext, playerNo); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const bool & ) > PlayerExit_Function;
		virtual bool PlayerExit ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & isExited) 
		{ 
			if (PlayerExit_Function==nullptr) 
				return true; 
			return PlayerExit_Function(remote,rmiContext, isExited); 
		}

	};
#endif

}


     
namespace PowerupC2S {


	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool EnterRoom ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_PowerupC2S_EnterRoom bool EnterRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_PowerupC2S_EnterRoom(DerivedClass) bool DerivedClass::EnterRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_PowerupC2S_EnterRoom EnterRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_PowerupC2S_EnterRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
               
		virtual bool ExitRoom ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_PowerupC2S_ExitRoom bool ExitRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_PowerupC2S_ExitRoom(DerivedClass) bool DerivedClass::ExitRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_PowerupC2S_ExitRoom ExitRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_PowerupC2S_ExitRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
               
		virtual bool GetReady ( ::Proud::HostID, ::Proud::RmiContext& , const bool & )		{ 
			return false;
		} 

#define DECRMI_PowerupC2S_GetReady bool GetReady ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & isReady) PN_OVERRIDE

#define DEFRMI_PowerupC2S_GetReady(DerivedClass) bool DerivedClass::GetReady ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & isReady)
#define CALL_PowerupC2S_GetReady GetReady ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & isReady)
#define PARAM_PowerupC2S_GetReady ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & isReady)
               
		virtual bool Move ( ::Proud::HostID, ::Proud::RmiContext& , const int32_t & , const std::vector<int32_t> & )		{ 
			return false;
		} 

#define DECRMI_PowerupC2S_Move bool Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & key, const std::vector<int32_t> & enemies) PN_OVERRIDE

#define DEFRMI_PowerupC2S_Move(DerivedClass) bool DerivedClass::Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & key, const std::vector<int32_t> & enemies)
#define CALL_PowerupC2S_Move Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & key, const std::vector<int32_t> & enemies)
#define PARAM_PowerupC2S_Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & key, const std::vector<int32_t> & enemies)
               
		virtual bool HasPoint ( ::Proud::HostID, ::Proud::RmiContext& , const int32_t & )		{ 
			return false;
		} 

#define DECRMI_PowerupC2S_HasPoint bool HasPoint ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & point) PN_OVERRIDE

#define DEFRMI_PowerupC2S_HasPoint(DerivedClass) bool DerivedClass::HasPoint ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & point)
#define CALL_PowerupC2S_HasPoint HasPoint ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & point)
#define PARAM_PowerupC2S_HasPoint ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & point)
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_EnterRoom;
		static const PNTCHAR* RmiName_ExitRoom;
		static const PNTCHAR* RmiName_GetReady;
		static const PNTCHAR* RmiName_Move;
		static const PNTCHAR* RmiName_HasPoint;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > EnterRoom_Function;
		virtual bool EnterRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (EnterRoom_Function==nullptr) 
				return true; 
			return EnterRoom_Function(remote,rmiContext); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > ExitRoom_Function;
		virtual bool ExitRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (ExitRoom_Function==nullptr) 
				return true; 
			return ExitRoom_Function(remote,rmiContext); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const bool & ) > GetReady_Function;
		virtual bool GetReady ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const bool & isReady) 
		{ 
			if (GetReady_Function==nullptr) 
				return true; 
			return GetReady_Function(remote,rmiContext, isReady); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int32_t & , const std::vector<int32_t> & ) > Move_Function;
		virtual bool Move ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & key, const std::vector<int32_t> & enemies) 
		{ 
			if (Move_Function==nullptr) 
				return true; 
			return Move_Function(remote,rmiContext, key, enemies); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int32_t & ) > HasPoint_Function;
		virtual bool HasPoint ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int32_t & point) 
		{ 
			if (HasPoint_Function==nullptr) 
				return true; 
			return HasPoint_Function(remote,rmiContext, point); 
		}

	};
#endif

}


